1. Uzupełnij funkcję tak, aby zwracała medianę wartości gradientu X (z filtra sobela) na obrazie img (skala szarości)
import numpy as np
from skimage import io
import cv2

img_color = io.imread('https://i.postimg.cc/mksNZfXc/BoQS.png')
img_gray = cv2.cvtColor(img_color, cv2.COLOR_RGB2GRAY)

# ROZWIĄZANIE:
def median_sobel_x(img):
 pass # <- uzupełnij funkcję

Odpowiedź:
sobel_x = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)
return np.median(sobel_x)

Jesli średnia to:
sobel_x = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)
return np.mean(sobel_x)


2. Uzupełnij funkcję, aby zwracała obraz będący rezultatem  konwolucji obrazu
# img (będącym obrazem w skali szarości) z następującym filtrem:

# | -1 -2 -1 |
# |  0  0  0 |
# |  1  2  1 |

import numpy as np
from skimage import io
import cv2

img_color = io.imread('https://i.postimg.cc/mksNZfXc/BoQS.png')
img_gray = cv2.cvtColor(img_color, cv2.COLOR_RGB2GRAY)

# ROZWIĄZANIE:
def fliter(img):
 pass # <- uzupełnij funkcję

ODPOWIEDŹ:
f = np.array([[-1,-2,-1], [0,0,0], [1,2,1]])
conv = cv2.filter2D(img, cv2.CV_32F, f)
return conv
	
	
3. Uzupełnij funkcję get_indices tak, aby zwracała listę wszystkich indeksów pikseli o wartości val z obrazu img. Indeksy powinny być w postaci krotki (y,x)
import numpy as np
from skimage import io
import cv2

img_color = io.imread('https://i.postimg.cc/mksNZfXc/BoQS.png')
img_gray = cv2.cvtColor(img_color, cv2.COLOR_RGB2GRAY)

# ROZWIĄZANIE:
def get_indices(img, val):
 pass
 
Odpowiedź:
indices = np.where(img == val)
return list(zip(indices[0], indices[1]))


4. Napisz funkcję, która przyjmuje obraz kolorowy img i zwraca wartość kanału niebieskiego na pozycji x, y (oś pozioma, oś pionowa), zakładając, że punkt (0,0) to lewy górny róg obrazu.
from matplotlib import pyplot as plt
from skimage import io
import cv2

img_color = io.imread('https://i.postimg.cc/mksNZfXc/BoQS.png')
plt.imshow(img_color)
plt.show()

# ROZWIĄZANIE:
def get_blue(img, x, y):
 pass # <- uzupełnij funkcję

ODPOWIEDŹ:
return img[y,x,2]

jeśli środkowy pixel to:
h, w, _ = img.shape
return img[h//2, w//2, 2]


5. Uzupełnij funkcję tak, by dokonywała reshapingu obrazu img (skala szarości) do postaci wektora o wymiarach N x 1 (ndarray).
import numpy as np
from skimage import io
import cv2

img_color = io.imread('https://i.postimg.cc/mksNZfXc/BoQS.png')
img_gray = cv2.cvtColor(img_color, cv2.COLOR_RGB2GRAY)

# ROZWIĄZANIE:
def img_flatten(img):
  pass

Odpowiedź:
return np.ravel(img).reshape((img.shape[0]*img.shape[1],1))
Jeśli to zmiana w reshape – kolejność i wartości


12.	…
Napisz funkcję, która przyjmuje obraz kolorowy img i zwraca średnią wartość  
kanału czerwonego 4 pikseli z każdego narożnika obrazu:

from matplotlib import pyplot as plt
from skimage import io
import cv2
import math

img_color = io.imread('https://i.postimg.cc/mksNZfXc/BoQS.png')
plt.imshow(img_color)
plt.show()

# ROZWIĄZANIE:
def get_corners_avg_red_level(img):
 pass # <- uzupełnij funkcję

Odpowiedź:
pixels = [img[0][0], img[0][img.shape[0]-1], img[img.shape[1]-1][0], img[img.shape[1]-1][img.shape[0]-1]]
return np.mean(np.array([pixels[0][0], pixels[1][0], pixels[2][0], pixels[3][0]]))

jeśli na ostatnim w razie w zmienić kolor kanału 

